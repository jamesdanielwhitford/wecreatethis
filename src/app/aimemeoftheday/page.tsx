"use client";

import { useState, useEffect, useRef } from 'react';
import { collection, query, orderBy, getDocs } from 'firebase/firestore';
import { db } from '@/firebase/config';
import { Post } from '@/types/firebase';
import styles from './page.module.css';
import Image from 'next/image';
import Link from 'next/link';

export default function AIMemeOfTheDay() {
  const [posts, setPosts] = useState<Post[]>([]);
  const [showModal, setShowModal] = useState(false);
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [currentPostIndex, setCurrentPostIndex] = useState(0);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const scrollContainerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    fetchPosts();

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const index = parseInt(entry.target.getAttribute('data-index') || '0');
            setCurrentPostIndex(index);
          }
        });
      },
      {
        threshold: 0.5,
        root: scrollContainerRef.current,
      }
    );

    const updateObserver = () => {
      document.querySelectorAll(`.${styles.memeSection}`).forEach((section) => {
        observer.observe(section);
      });
    };

    updateObserver();

    return () => observer.disconnect();
  }, [posts]);

  async function fetchPosts() {
    const q = query(collection(db, "posts"), orderBy("date", "desc"));
    const querySnapshot = await getDocs(q);
    const fetchedPosts = querySnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    })) as Post[];
    setPosts(fetchedPosts);
  }

  const scrollToPost = (index: number) => {
    const sections = document.querySelectorAll(`.${styles.memeSection}`);
    sections[index]?.scrollIntoView({ behavior: 'smooth' });
    setShowDatePicker(false);
  };

  const handleDateSelect = (date: string) => {
    const index = posts.findIndex(post => post.date === date);
    if (index !== -1) {
      scrollToPost(index);
    }
  };

  const formatDate = (date: string) => {
    return new Date(date).toLocaleDateString('en-GB', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });
  };

  if (!posts.length) return null;

  const currentPost = posts[currentPostIndex];

  return (
    <div className={styles.container}>
      {/* Fixed UI elements */}
      <div 
        className={styles.date} 
        onClick={() => setShowDatePicker(true)}
      >
        {formatDate(currentPost.date)}
      </div>

      <button 
        className={styles.helpButton} 
        aria-label="Help"
        onClick={() => setShowModal(true)}
      >
        ?
      </button>

      {/* Scrollable content */}
      <div className={styles.scrollContainer} ref={scrollContainerRef}>
        {posts.map((post, index) => (
          <section key={post.id} className={styles.memeSection} data-index={index} onClick={() => setIsFullscreen(true)}>
            <div className={styles.memeContainer}>
              <Image
                src={post.imageUrl}
                alt="AI Generated Meme"
                width={1200}
                height={1200}
                className={styles.memeImage}
                priority={index === 0}
              />
              {post.caption && (
                <div className={styles.captionText}>{post.caption}</div>
              )}
            </div>
          </section>
        ))}
      </div>

      {/* Modals and overlays */}
      {showDatePicker && (
        <>
          <div className={styles.overlay} onClick={() => setShowDatePicker(false)} />
          <div className={styles.datePicker}>
            <div className={styles.dateList}>
              {posts.map((post, index) => (
                <div
                  key={post.id}
                  className={styles.dateOption}
                  onClick={() => handleDateSelect(post.date)}
                >
                  {formatDate(post.date)}
                </div>
              ))}
            </div>
          </div>
        </>
      )}

      {showModal && (
        <div className={styles.modal} onClick={() => setShowModal(false)}>
          <div className={styles.modalContent} onClick={e => e.stopPropagation()}>
            <button className={styles.closeButton} onClick={() => setShowModal(false)}>Ã—</button>
            <h2>Get it?</h2>
            <p>This meme was generated by:</p>
            <div style={{ margin: '1rem 0' }}>
              {currentPost.companyLogoUrl ? (
                <Image
                  src={currentPost.companyLogoUrl}
                  alt={currentPost.companyName}
                  width={100}
                  height={100}
                  style={{ objectFit: 'contain' }}
                />
              ) : (
                <p>{currentPost.companyName}</p>
              )}
            </div>
            <p>using this prompt:</p>
            <blockquote style={{ margin: '1rem 0', fontStyle: 'italic' }}>
              "{currentPost.prompt}"
            </blockquote>
            <Link href="/contribute" style={{ color: 'blue', textDecoration: 'underline' }}>
              Contribute your own prompt
            </Link>
            <p>and join a community of people interested in the hilarious complexity of humanity.</p>
            <p style={{ marginTop: '1rem' }}>Made you laugh? Made you think?<br />Share your thoughts with the world!</p>
            <div className={styles.socialLinks}>
              {/* Add your social media links/icons here */}
            </div>
          </div>
        </div>
      )}

      {isFullscreen && (
        <div className={styles.fullscreenOverlay} onClick={() => setIsFullscreen(false)}>
          <Image
            src={currentPost.imageUrl}
            alt="AI Generated Meme"
            width={1200}
            height={1200}
            className={styles.fullscreenImage}
            priority
          />
        </div>
      )}
    </div>
  );
}